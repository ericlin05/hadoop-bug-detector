Description

Beeline adds a bad connection(s) to the connection list and makes it the current connection, so any subsequent queries will attempt to use this bad connection and will fail. Even a "!close" would not work.
1) all queries fail unless !go is used.
2) !closeall cannot close the active connections either.
3) !exit will exit while attempting to establish these inactive connections without closing the active connections. So this could hold up server side resources.


beeline&amp;gt; !connect jdbc:hive2://localhost:10000 hive1 hive1
scan complete in 8ms
Connecting to jdbc:hive2://localhost:10000
Connected to: Apache Hive (version 2.0.0-SNAPSHOT)
Driver: Hive JDBC (version 1.1.0-cdh5.7.0-SNAPSHOT)
Transaction isolation: TRANSACTION_REPEATABLE_READ
0: jdbc:hive2://localhost:10000&amp;gt; !connect jdbc:hive2://localhost:10000 hive1 hive1
Connecting to jdbc:hive2://localhost:10000
Connected to: Apache Hive (version 2.0.0-SNAPSHOT)
Driver: Hive JDBC (version 1.1.0-cdh5.7.0-SNAPSHOT)
Transaction isolation: TRANSACTION_REPEATABLE_READ
1: jdbc:hive2://localhost:10000&amp;gt; !connect jdbc:hive2://localhost:10000 hive1 hive1
Connecting to jdbc:hive2://localhost:10000
Connected to: Apache Hive (version 2.0.0-SNAPSHOT)
Driver: Hive JDBC (version 1.1.0-cdh5.7.0-SNAPSHOT)
Transaction isolation: TRANSACTION_REPEATABLE_READ
2: jdbc:hive2://localhost:10000&amp;gt; !tables
+------------+--------------+---------------------+-------------+----------+--+
| TABLE_CAT  | TABLE_SCHEM  |     TABLE_NAME      | TABLE_TYPE  | REMARKS  |
+------------+--------------+---------------------+-------------+----------+--+
|            | default      | char_nested_1       | TABLE       | NULL     |
|            | default      | src                 | TABLE       | NULL     |
|            | default      | char_nested_struct  | TABLE       | NULL     |
|            | default      | src_thrift          | TABLE       | NULL     |
|            | default      | x                   | TABLE       | NULL     |
+------------+--------------+---------------------+-------------+----------+--+
2: jdbc:hive2://localhost:10000&amp;gt; !list
3 active connections:
 #0  open     jdbc:hive2://localhost:10000
 #1  open     jdbc:hive2://localhost:10000
 #2  open     jdbc:hive2://localhost:10000
2: jdbc:hive2://localhost:10000&amp;gt; !connect jdbc:hive2://localhost:11000 hive1 hive1
Connecting to jdbc:hive2://localhost:11000
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)
3: jdbc:hive2://localhost:11000 (closed)&amp;gt; !tables
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)
3: jdbc:hive2://localhost:11000 (closed)&amp;gt; !list
4 active connections:
 #0  open     jdbc:hive2://localhost:10000
 #1  open     jdbc:hive2://localhost:10000
 #2  open     jdbc:hive2://localhost:10000
 #3  closed   jdbc:hive2://localhost:11000
3: jdbc:hive2://localhost:11000 (closed)&amp;gt; !close
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)
3: jdbc:hive2://localhost:11000 (closed)&amp;gt; !closeall
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)
4: jdbc:hive2://localhost:11000 (closed)&amp;gt; !exit
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)
Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:11000: java.net.ConnectException: Connection refused (state=08S01,code=0)


The workaround is to use !go to set the current connection to a "good" connection.


